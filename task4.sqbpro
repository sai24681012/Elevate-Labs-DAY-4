<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="sqlite-sakila.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached><db schema="sqlite-sakila" path="C:\Users\hmano\OneDrive\Desktop\sai\DAY-4\sqlite-sakila.db"/></attached><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="6514"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/><expanded_item id="4" parent="1"/></tab_structure><tab_browse><table title="actor" custom_title="0" dock_id="1" table="4,5:mainactor"/><dock_state state="000000ff00000000fd00000001000000020000039100000288fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000003910000012900ffffff0000026d0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="actor" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="3" mode="0"/></sort><column_widths><column index="1" value="55"/><column index="2" value="95"/><column index="3" value="103"/><column index="4" value="159"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="address" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="70"/><column index="2" value="300"/><column index="3" value="60"/><column index="4" value="48"/><column index="5" value="48"/><column index="6" value="77"/><column index="7" value="43"/><column index="8" value="159"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SELECT + WHERE + ORDER BY">-- List all tables
SELECT name FROM sqlite_master WHERE type='table';

-- View structure of key tables
PRAGMA table_info(actor);
PRAGMA table_info(film);
PRAGMA table_info(customer);
PRAGMA table_info(rental);
PRAGMA table_info(payment);

-- View first 100 customers
SELECT customer_id, first_name, last_name, email
FROM customer
LIMIT 100;

;




</sql><sql name="WHERE">-- Select a specific customer named MARY
SELECT customer_id, first_name, last_name, email
FROM customer
WHERE first_name = 'MARY'</sql><sql name="JOINS">-- Rentals with film title and customer name
SELECT r.rental_id, r.rental_date, 
       f.title AS film_title,
       c.first_name || ' ' || c.last_name AS customer
FROM rental r
RIGHT JOIN customer c ON r.customer_id = c.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
LEFT JOIN film f ON i.film_id = f.film_id
LIMIT 20;

</sql><sql name="SUBQUERIES">-- Customers who rented more than the average rentals
SELECT c.customer_id, 
       c.first_name || ' ' || c.last_name AS customer,
       COUNT(r.rental_id) AS rental_count
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
HAVING rental_count &gt; (
    SELECT AVG(rental_count) 
    FROM (
        SELECT COUNT(r.rental_id) AS rental_count
        FROM rental r
        GROUP BY r.customer_id
    )
);
</sql><sql name="Aggregate Functions">-- Total payments made by each customer with avg payment &lt; 4.9 and total &gt; 166
SELECT c.customer_id,
       c.first_name || ' ' || c.last_name AS customer,
       SUM(p.amount) AS total_spent,
       AVG(p.amount) AS avg_payment
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id
HAVING AVG(p.amount) &lt; 4.9 AND SUM(p.amount) &gt; 166
ORDER BY total_spent DESC
LIMIT 10;


</sql><sql name="VIEW BY TOP SPENT ">DROP VIEW IF EXISTS top_customers;

CREATE VIEW top_customers AS
SELECT c.customer_id,
       c.first_name || ' ' || c.last_name AS customer,
       SUM(p.amount) AS total_spent
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id;

-- Query the top 100 spending customers
SELECT * FROM top_customers
ORDER BY total_spent DESC
LIMIT 100;
SELECT * FROM top_customers
WHERE total_spent &gt; 150
ORDER BY total_spent DESC
LIMIT 100;
</sql><sql name="optimize ">-- Create index on rental.customer_id for faster lookups
DROP INDEX IF EXISTS idx_rental_customer;
CREATE INDEX idx_rental_customer ON rental(customer_id);
SELECT r.*, p.amount
FROM rental r
JOIN payment p ON r.rental_id = p.rental_id
WHERE p.amount &lt; 200
LIMIT 50;
</sql><sql name="COMPLETE SQL TASK-4" filename="C:/Users/hmano/OneDrive/Desktop/sai/DAY-4/SQL TASK-4.sql">-- Reference to file &quot;C:/Users/hmano/OneDrive/Desktop/sai/DAY-4/SQL TASK-4.sql&quot; (not supported by this version) --</sql><current_tab id="7"/></tab_sql></sqlb_project>
